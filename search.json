[{"title":"基于Vue.js的组件化项目目录结构","url":"http://vip-fe-sh.com/2016/04/16/the-folder-structure-of-componentization-by-vuejs/","content":""},{"title":"前端组件化的一些思考","url":"http://vip-fe-sh.com/2016/04/13/think-about-frontend-componentization-solution/","content":"<p>这两年「前端组件化」这个词已经被玩了很久了，angular，react 等框架也在不同的方向上做了很多的探索，在我们团队，由于是内部应用项目，目前的架构设计比较简单，对后续的扩展和维护都不太方便，所以最近也在尝试接入「高大上」的组件化模式，本文记录在项目开发前后的一些思考。</p>\n<h2 id=\"一切皆组件\"><a href=\"#一切皆组件\" class=\"headerlink\" title=\"一切皆组件\"></a>一切皆组件</h2><p>我认为组件化的核心是分治和复用，分治是指将一个复杂的系统拆分成一个个简单的单元，复用是指每个单元都是独立的可复用的，对于前端系统的组件化，我们就需要改变传统的网页开发思维，之前通常的做法是先写出页面的 html 结构和 css 样式，再完成负责各种逻辑和交互的 js 脚本，这种方式基本上是把页面作为一个整体，自上而下线式的来考虑的，而组件化的基本思想就是一切皆组件，大到页面、路由，小到按钮、图片，都可以认为是一个独立的组件，每个组件包含它自己的 html、css 和 js 部分，根据传入的状态和属性呈现不同的展现，并负责组件自身的逻辑和交互，通过各种组件的组合和嵌套，我们就得到了一个完整的页面。</p>\n<h2 id=\"组件维度\"><a href=\"#组件维度\" class=\"headerlink\" title=\"组件维度\"></a>组件维度</h2><p>既然说到了一切皆组件，那么在划分组件的时候如何控制组件的粗粒度也是一个问题，往细了划分可以直接到标签维度，比如<code>&lt;input&gt;</code>、<code>&lt;button&gt;</code>、<code>&lt;table&gt;</code>这些，都可以按照自己的需求提取成通用的独立组件，甚至我们可以定义一整套专用的基础标签组件库，在这基础上实现一套基础控件，再往上是功能模块、页面，这种方式复用性极高，如果设计的好的话完全可以统一所有的业务和应用，但是显而易见的，开发的工程量极大，等于说要把 html 中的很多标签重新实现了一遍，包括标签支持的属性、方法和事件，再考虑到浏览器的兼容性，设计上的规范性，成本实在太高；另一方面，往粗了划分，也就是按照可见的功能区块进行分，这种方式实现效率高，但是相对的复用性就要差一些，很多组件可能只有这一个业务使用，所以在实际开发中还是要根据项目自身的情况把控组件粒度，在开发效率和可复用性中找到一个相对的平衡点。</p>\n<h2 id=\"组件设计\"><a href=\"#组件设计\" class=\"headerlink\" title=\"组件设计\"></a>组件设计</h2><p>一个组件的组成应当包括模板、样式和脚本三个部分，作为一个整体被页面或其他组件引用，所以组件在设计的时候就要考虑到它的操作性和复用性，比如接受哪些属性，哪些是不可变的，哪些是可变的，引入哪些方法，暴露哪些方法，以及如何接入一套通用的事件机制和通信方式，再想得远一点的话，组件是否可以被继承，组件之间是否可以被监听，在开发之初多多思考，后续才不会处处受缚。</p>\n<h2 id=\"数据流转\"><a href=\"#数据流转\" class=\"headerlink\" title=\"数据流转\"></a>数据流转</h2><p>组件的数据决定了组件的展现，对于整个应用的数据流转，推荐采用类似 facebook 的 <a href=\"https://facebook.github.io/flux/\" target=\"_blank\" rel=\"external\">flux</a> 架构的单向数据流模式，通过一层 store，统一管理所有的数据，由页面根组件把数据分别派发到各个组件，在组件中使用事先注册的 action 更新 store 中的数据，然后通过框架的双向绑定机制更新组件的 view，flux 架构的实现方式有很多种，除了 facebook 自己的 <a href=\"https://github.com/facebook/flux\" target=\"_blank\" rel=\"external\">flux</a>，社区流行的实现还有 <a href=\"https://github.com/reactjs/redux\" target=\"_blank\" rel=\"external\">redux</a>，<a href=\"https://github.com/reflux/refluxjs\" target=\"_blank\" rel=\"external\">reflux</a> 等，具体的功能和用法可能有些差异，不过基本的概念和思路都是一致的，可以根据个人的偏好和需求选择，如果还有兴趣的话，可以了解一下 facebook 的 <a href=\"https://github.com/facebook/immutable-js\" target=\"_blank\" rel=\"external\">immutable-js</a>，实现了 js 中的不可变数据类型，对于需要频繁操作 store 的场景，更加快速、安全和方便。</p>\n<h2 id=\"框架选择\"><a href=\"#框架选择\" class=\"headerlink\" title=\"框架选择\"></a>框架选择</h2><p>目前主流的组件化框架大概有这些：Angular、React、Polymer、Vue，各有优劣，适用的场景也不同，网上也有很多各个框架之间比较的文章，<a href=\"https://www.zhihu.com/question/39943474\" target=\"_blank\" rel=\"external\">39943474</a>，<a href=\"https://www.zhihu.com/question/38989845\" target=\"_blank\" rel=\"external\">38989845</a>，<a href=\"https://www.zhihu.com/question/38576309\" target=\"_blank\" rel=\"external\">38576309</a>，<a href=\"http://zhuanlan.zhihu.com/p/20549104\" target=\"_blank\" rel=\"external\">20549104</a>，这里就不具体展开讲了，建议对每个框架都简单了解一下，看下api以及官方demo的写法，根据自己项目的需求选择最合适的框架。</p>\n<h2 id=\"组件管理\"><a href=\"#组件管理\" class=\"headerlink\" title=\"组件管理\"></a>组件管理</h2><p>组件开发完成后，如何能更方便的在别的项目中复用，也是一个要思考的问题，简单的方法是直接拷贝组件的目录到新项目中，然后就作为本地组件直接引用，当然这个方法非常不「前端」，所以更好的方式是通过 npm 管理，把完成的组件包发布到 npm 上，其他项目只需要通过 npm 安装相关包即可使用，对于通用非业务组件使用这种方式可以很好的满足需求，但是如果是具体的业务组件，出于安全考虑，不能直接发布到 npm 上，除非可以建立私有 npm仓库，要不就还是拷贝吧。</p>\n<blockquote>\n<p>to be continued…</p>\n</blockquote>\n"},{"title":"Hello World","url":"http://vip-fe-sh.com/2016/04/05/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"}]