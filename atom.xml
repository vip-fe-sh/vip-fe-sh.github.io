<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VIP FE @ SH</title>
  <subtitle>eat more, sleep more, code more</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vip-fe-sh.com/"/>
  <updated>2016-05-02T14:24:23.000Z</updated>
  <id>http://vip-fe-sh.com/</id>
  
  <author>
    <name>vip-fe-sh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue.js 2.0 源码分析[0]</title>
    <link href="http://vip-fe-sh.com/2016/05/01/analysis-about-vue-2-source-code/"/>
    <id>http://vip-fe-sh.com/2016/05/01/analysis-about-vue-2-source-code/</id>
    <published>2016-05-01T07:25:51.000Z</published>
    <updated>2016-05-02T14:24:23.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://weibo.com/u/1761511274?topnav=1&amp;amp;wvr=6&amp;amp;topsug=1&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@尤小右&lt;/a&gt; 同学最近发布了 Vue 2.0 的 pre-alpha 版本，&lt;a href=&quot;https://medium.com/the-vue-point/announcing-vue-js-2-0-8af1bde7ab9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;，&lt;a href=&quot;http://jiongks.name/blog/announcing-vue-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文地址&lt;/a&gt;，新版本宣称带来了很多激动人心的改进和新功能，作为 Vue 和小右同学的忠实粉，趁正式发布之前赶紧先来翻翻 2.0 的&lt;a href=&quot;https://github.com/vuejs/vue/tree/next/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt;，学(mo)习(bai)一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to be continued…&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://weibo.com/u/1761511274?topnav=1&amp;amp;wvr=6&amp;amp;topsug=1&amp;amp;is_all=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@尤小右&lt;/a&gt; 同学最近发布了 Vue 
    
    </summary>
    
      <category term="web开发" scheme="http://vip-fe-sh.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="http://vip-fe-sh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vuejs" scheme="http://vip-fe-sh.com/tags/vuejs/"/>
    
      <category term="源码" scheme="http://vip-fe-sh.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>基于 Vue.js 的组件化项目目录结构</title>
    <link href="http://vip-fe-sh.com/2016/04/16/folder-structure-of-componentization-by-vuejs/"/>
    <id>http://vip-fe-sh.com/2016/04/16/folder-structure-of-componentization-by-vuejs/</id>
    <published>2016-04-16T12:59:26.000Z</published>
    <updated>2016-05-02T14:23:56.000Z</updated>
    
    <content type="html">&lt;p&gt;经过了&lt;a href=&quot;http://vip-fe-sh.com/2016/04/13/think-about-frontend-componentization-solution/&quot;&gt;前文&lt;/a&gt;的一番讨论，我们的项目最终采用了一套基于 &lt;a href=&quot;http://cn.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue.js&lt;/a&gt; 和 &lt;a href=&quot;http://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack&lt;/a&gt; 的前端组件化架构，参考了 Vue.js 的官方推荐结构 &lt;a href=&quot;https://github.com/vuejs-templates/webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue-webpack-boilerplate&lt;/a&gt;，轻量、高效，自动化、扩展性和维护性都不错，下面简单说明一下这套系统的目录结构.&lt;/p&gt;
&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;webapp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-tag&quot;&gt;build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.base&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.conf&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.dev&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.conf&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── &lt;span class=&quot;selector-tag&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.prod&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.conf&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-tag&quot;&gt;src&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;components&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── &lt;span class=&quot;selector-tag&quot;&gt;App&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   │   ├── &lt;span class=&quot;selector-tag&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   │   ├── &lt;span class=&quot;selector-tag&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   │   └── &lt;span class=&quot;selector-tag&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── &lt;span class=&quot;selector-tag&quot;&gt;Hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │       ├── &lt;span class=&quot;selector-tag&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │       ├── &lt;span class=&quot;selector-tag&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │       └── &lt;span class=&quot;selector-tag&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;vuex&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── &lt;span class=&quot;selector-tag&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── &lt;span class=&quot;selector-tag&quot;&gt;mutations&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── &lt;span class=&quot;selector-tag&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;utils&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── &lt;span class=&quot;selector-tag&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── &lt;span class=&quot;selector-tag&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── &lt;span class=&quot;selector-tag&quot;&gt;styles&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── &lt;span class=&quot;selector-tag&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── &lt;span class=&quot;selector-tag&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-tag&quot;&gt;dist&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.min&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.min&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.css&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── &lt;span class=&quot;selector-tag&quot;&gt;vendors&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.min&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-tag&quot;&gt;demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── &lt;span class=&quot;selector-tag&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── &lt;span class=&quot;selector-tag&quot;&gt;mock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── &lt;span class=&quot;selector-tag&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-tag&quot;&gt;lib&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── &lt;span class=&quot;selector-tag&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.min&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-tag&quot;&gt;node_modules&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-class&quot;&gt;.babelrc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── &lt;span class=&quot;selector-class&quot;&gt;.eslintrc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── &lt;span class=&quot;selector-tag&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h2&gt;&lt;p&gt;build 目录下面是 webpack 的配置脚本，分为基础、开发和生产三个环境的配置，可以分别针对开发环境和生产环境执行打包操作。我们用到的 webpack 功能主要有 js 代码 eslint 检查、es6 代码 babel 编译、sass 编译、打包单独 css 文件、单独打包框架代码、sourceMap 输出、热替换、自动刷新、开发环境判断、开发服务器等，更多的功能可以参考 webpack &lt;a href=&quot;http://webpack.github.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h2&gt;&lt;p&gt;实际开发代码都在 src 目录下，包括入口文件 &lt;code&gt;app.js&lt;/code&gt;，组件目录 &lt;code&gt;components&lt;/code&gt;，数据流转处理 &lt;code&gt;vuex&lt;/code&gt;，工具函数目录 &lt;code&gt;utils&lt;/code&gt;，以及样式文件目录 &lt;code&gt;styles&lt;/code&gt;，每个组件由 html、sass，js 三个文件组成，&lt;code&gt;utils&lt;/code&gt; 主要包括 Vue.js 的过滤器，以及一些通用工具函数，样式下有基础样式和应用入口样式，所有这些经由 webpack 打包，最后生成 &lt;code&gt;dist&lt;/code&gt; 目录下的 &lt;code&gt;app.min.js&lt;/code&gt;，&lt;code&gt;app.min.css&lt;/code&gt;，这里的 &lt;code&gt;vendors.min.js&lt;/code&gt; 是业务之外的代码打包出来的，主要包含 Vue.js 和其他一些依赖.&lt;/p&gt;
&lt;h2 id=&quot;vuex&quot;&gt;&lt;a href=&quot;#vuex&quot; class=&quot;headerlink&quot; title=&quot;vuex&quot;&gt;&lt;/a&gt;vuex&lt;/h2&gt;&lt;p&gt;对于比较简单的纯展示性页面，只要有单纯的 ui 组件组合就可以满足需求了，如果项目比较复杂，数据交互很频繁，那么就很有必要把数据流转的处理逻辑单独给拎出来，Vue.js 官方提供了类 flux 工具 &lt;a href=&quot;https://github.com/vuejs/vuex/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vuex&lt;/a&gt;，用于简化组件和数据的交互，整体流程如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/vuejs/vuex/master/docs/en/vuex.png&quot; alt=&quot;vuex&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;本地demo&quot;&gt;&lt;a href=&quot;#本地demo&quot; class=&quot;headerlink&quot; title=&quot;本地demo&quot;&gt;&lt;/a&gt;本地demo&lt;/h2&gt;&lt;p&gt;我们在webpack 开发服务器中支持了本地 demo 和数据 mock，这样可以方便在本地调试页面，另外，我们引入了 vue-resource，完成 http 请求.&lt;/p&gt;
&lt;h2 id=&quot;非-npm-模块&quot;&gt;&lt;a href=&quot;#非-npm-模块&quot; class=&quot;headerlink&quot; title=&quot;非 npm 模块&quot;&gt;&lt;/a&gt;非 npm 模块&lt;/h2&gt;&lt;p&gt;对第三方非 npm 模块，我们统一放到 &lt;code&gt;lib&lt;/code&gt; 目录下，在页面中直接引入.&lt;/p&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;.babelrc 和 .eslintrc 分别是 &lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;babel&lt;/a&gt; 和 &lt;a href=&quot;http://eslint.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eslint&lt;/a&gt; 的配置文件，需要了解具体功能的话可以查看它们的官方文档，此外，我们还用到了 &lt;a href=&quot;https://github.com/feross/standard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;standard JS&lt;/a&gt; 作为 eslint 的检查规则，配合编辑器的 linter 和 format 功能，可以很方便的统一代码规范.&lt;/p&gt;
&lt;h2 id=&quot;vip-cli&quot;&gt;&lt;a href=&quot;#vip-cli&quot; class=&quot;headerlink&quot; title=&quot;vip-cli&quot;&gt;&lt;/a&gt;vip-cli&lt;/h2&gt;&lt;p&gt;最后，我们把这一套目录结构提取出来，基于 Vue.js 官方的脚手架工具 &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue-cli&lt;/a&gt;，做了一个 &lt;a href=&quot;https://github.com/vip-fe-sh/vip-cli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vip-cli&lt;/a&gt;，可以直接生成如上的目录结构，如果其他项目需要类似架构的话可以很方便的复用：）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to be continued…&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;经过了&lt;a href=&quot;http://vip-fe-sh.com/2016/04/13/think-about-frontend-componentization-solution/&quot;&gt;前文&lt;/a&gt;的一番讨论，我们的项目最终采用了一套基于 &lt;a href=&quot;http://c
    
    </summary>
    
      <category term="web开发" scheme="http://vip-fe-sh.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="http://vip-fe-sh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vuejs" scheme="http://vip-fe-sh.com/tags/vuejs/"/>
    
      <category term="组件化" scheme="http://vip-fe-sh.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>前端组件化的一些思考</title>
    <link href="http://vip-fe-sh.com/2016/04/13/think-about-frontend-componentization-solution/"/>
    <id>http://vip-fe-sh.com/2016/04/13/think-about-frontend-componentization-solution/</id>
    <published>2016-04-13T12:07:49.000Z</published>
    <updated>2016-04-18T14:31:20.000Z</updated>
    
    <content type="html">&lt;p&gt;这两年「前端组件化」这个词已经被玩了很久了，angular，react 等框架也在不同的方向上做了很多的探索，在我们团队，由于是内部应用项目，目前的架构设计比较简单，对后续的扩展和维护都不太方便，所以最近也在尝试接入「高大上」的组件化模式，本文记录在项目开发前后的一些思考.&lt;/p&gt;
&lt;h2 id=&quot;一切皆组件&quot;&gt;&lt;a href=&quot;#一切皆组件&quot; class=&quot;headerlink&quot; title=&quot;一切皆组件&quot;&gt;&lt;/a&gt;一切皆组件&lt;/h2&gt;&lt;p&gt;我认为组件化的核心是分治和复用，分治是指将一个复杂的系统拆分成一个个简单的单元，复用是指每个单元都是独立的可复用的，对于前端系统的组件化，我们就需要改变传统的网页开发思维，之前通常的做法是先写出页面的 html 结构和 css 样式，再完成负责各种逻辑和交互的 js 脚本，这种方式基本上是把页面作为一个整体，自上而下线式的来考虑的，而组件化的基本思想就是一切皆组件，大到页面、路由，小到按钮、图片，都可以认为是一个独立的组件，每个组件包含它自己的 html、css 和 js 部分，根据传入的状态和属性呈现不同的展现，并负责组件自身的逻辑和交互，通过各种组件的组合和嵌套，我们就得到了一个完整的页面.&lt;/p&gt;
&lt;h2 id=&quot;组件维度&quot;&gt;&lt;a href=&quot;#组件维度&quot; class=&quot;headerlink&quot; title=&quot;组件维度&quot;&gt;&lt;/a&gt;组件维度&lt;/h2&gt;&lt;p&gt;既然说到了一切皆组件，那么在划分组件的时候如何控制组件的粗粒度也是一个问题，往细了划分可以直接到标签维度，比如&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;这些，都可以按照自己的需求提取成通用的独立组件，甚至我们可以定义一整套专用的基础标签组件库，在这基础上实现一套基础控件，再往上是功能模块、页面，这种方式复用性极高，如果设计的好的话完全可以统一所有的业务和应用，但是显而易见的，开发的工程量极大，等于说要把 html 中的很多标签重新实现了一遍，包括标签支持的属性、方法和事件，再考虑到浏览器的兼容性，设计上的规范性，成本实在太高；另一方面，往粗了划分，也就是按照可见的功能区块进行分，这种方式实现效率高，但是相对的复用性就要差一些，很多组件可能只有这一个业务使用，所以在实际开发中还是要根据项目自身的情况把控组件粒度，在开发效率和可复用性中找到一个相对的平衡点.&lt;/p&gt;
&lt;h2 id=&quot;组件设计&quot;&gt;&lt;a href=&quot;#组件设计&quot; class=&quot;headerlink&quot; title=&quot;组件设计&quot;&gt;&lt;/a&gt;组件设计&lt;/h2&gt;&lt;p&gt;一个组件的组成应当包括模板、样式和脚本三个部分，作为一个整体被页面或其他组件引用，所以组件在设计的时候就要考虑到它的操作性和复用性，比如接受哪些属性，哪些是不可变的，哪些是可变的，引入哪些方法，暴露哪些方法，以及如何接入一套通用的事件机制和通信方式，再想得远一点的话，组件是否可以被继承，组件之间是否可以被监听，在开发之初多多思考，后续才不会处处受缚.&lt;/p&gt;
&lt;h2 id=&quot;数据流转&quot;&gt;&lt;a href=&quot;#数据流转&quot; class=&quot;headerlink&quot; title=&quot;数据流转&quot;&gt;&lt;/a&gt;数据流转&lt;/h2&gt;&lt;p&gt;组件的数据决定了组件的展现，对于整个应用的数据流转，推荐采用类似 facebook 的 &lt;a href=&quot;https://facebook.github.io/flux/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flux&lt;/a&gt; 架构的单向数据流模式，通过一层 store，统一管理所有的数据，由页面根组件把数据分别派发到各个组件，在组件中使用事先注册的 action 更新 store 中的数据，然后通过框架的双向绑定机制更新组件的 view，flux 架构的实现方式有很多种，除了 facebook 自己的 &lt;a href=&quot;https://github.com/facebook/flux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flux&lt;/a&gt;，社区流行的实现还有 &lt;a href=&quot;https://github.com/reactjs/redux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux&lt;/a&gt;，&lt;a href=&quot;https://github.com/reflux/refluxjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reflux&lt;/a&gt; 等，具体的功能和用法可能有些差异，不过基本的概念和思路都是一致的，可以根据个人的偏好和需求选择，如果还有兴趣的话，可以了解一下 facebook 的 &lt;a href=&quot;https://github.com/facebook/immutable-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;immutable-js&lt;/a&gt;，实现了 js 中的不可变数据类型，对于需要频繁操作 store 的场景，更加快速、安全和方便.&lt;/p&gt;
&lt;h2 id=&quot;框架选择&quot;&gt;&lt;a href=&quot;#框架选择&quot; class=&quot;headerlink&quot; title=&quot;框架选择&quot;&gt;&lt;/a&gt;框架选择&lt;/h2&gt;&lt;p&gt;目前主流的组件化框架大概有这些：Angular、React、Polymer、Vue，各有优劣，适用的场景也不同，网上也有很多各个框架之间比较的文章，&lt;a href=&quot;https://www.zhihu.com/question/39943474&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;39943474&lt;/a&gt;，&lt;a href=&quot;https://www.zhihu.com/question/38989845&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;38989845&lt;/a&gt;，&lt;a href=&quot;https://www.zhihu.com/question/38576309&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;38576309&lt;/a&gt;，&lt;a href=&quot;http://zhuanlan.zhihu.com/p/20549104&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;20549104&lt;/a&gt;，这里就不具体展开讲了，建议对每个框架都简单了解一下，看下api以及官方demo的写法，根据自己项目的需求选择最合适的框架.&lt;/p&gt;
&lt;h2 id=&quot;组件管理&quot;&gt;&lt;a href=&quot;#组件管理&quot; class=&quot;headerlink&quot; title=&quot;组件管理&quot;&gt;&lt;/a&gt;组件管理&lt;/h2&gt;&lt;p&gt;组件开发完成后，如何能更方便的在别的项目中复用，也是一个要思考的问题，简单的方法是直接拷贝组件的目录到新项目中，然后就作为本地组件直接引用，当然这个方法非常不「前端」，所以更好的方式是通过 npm 管理，把完成的组件包发布到 npm 上，其他项目只需要通过 npm 安装相关包即可使用，对于通用非业务组件使用这种方式可以很好的满足需求，但是如果是具体的业务组件，出于安全考虑，不能直接发布到 npm 上，除非可以建立私有 npm仓库，要不就还是拷贝吧.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;to be continued…&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这两年「前端组件化」这个词已经被玩了很久了，angular，react 等框架也在不同的方向上做了很多的探索，在我们团队，由于是内部应用项目，目前的架构设计比较简单，对后续的扩展和维护都不太方便，所以最近也在尝试接入「高大上」的组件化模式，本文记录在项目开发前后的一些思考.
    
    </summary>
    
      <category term="web开发" scheme="http://vip-fe-sh.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="http://vip-fe-sh.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="组件化" scheme="http://vip-fe-sh.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://vip-fe-sh.com/2016/04/05/hello-world/"/>
    <id>http://vip-fe-sh.com/2016/04/05/hello-world/</id>
    <published>2016-04-05T03:20:44.000Z</published>
    <updated>2016-04-05T03:20:44.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
